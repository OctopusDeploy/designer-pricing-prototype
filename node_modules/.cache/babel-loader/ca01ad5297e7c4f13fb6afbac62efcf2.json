{"ast":null,"code":"var _jsxFileName = \"/Users/jessicaross/Documents/GitHub/designer-pricing-prototype/src/pages/pricing/components/ServerPricing.tsx\";\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport { Box, Grid, Input, Slider, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { formatCcy, handleInvalidValue } from \"../../../utils\";\nimport { FormControlLabel } from \"@material-ui/core\";\nimport { Checkbox } from \"@material-ui/core\";\nconst useStyles = makeStyles({\n  root: {\n    width: 250\n  },\n  input: {\n    width: 42\n  }\n});\nconst FREE_TARGETS = 10;\nconst COST_PER_TARGET = 10;\nconst HIGH_AVAILABILITY_TARGETS = 100;\nconst UNLIMITED_TARGETS = 2001;\nconst UNLIMITED_PRICE = \"192,000\";\n\nconst isChargedTargets = valueTargets => {\n  return valueTargets > FREE_TARGETS;\n};\n\nconst ServerPricing = () => {\n  // Styling\n  const classes = useStyles(); // Deployment Targets\n\n  const [valueTargets, setValueTargets] = useState(FREE_TARGETS);\n\n  const handleSliderChange = (event, newValue) => {\n    setValueTargets(newValue);\n    setLastTargetsSliderVal(valueTargets);\n  };\n\n  const handleBlur = () => {\n    if (valueTargets < 0) {\n      setValueTargets(0);\n    } else if (valueTargets > 10000) {\n      setValueTargets(10000);\n    }\n  }; // Single spot where targets slider value to be set by the user\n\n\n  const updateUserTargets = valueTargets => {\n    setValidTargets(valueTargets); // update display value\n\n    setLastTargetsSliderVal(valueTargets); // remember user's last value\n    // reset checkbox if targets slider value is not eligible to HA\n\n    if (valueTargets < HIGH_AVAILABILITY_TARGETS) {\n      setHaCheckboxVal(false);\n    }\n  };\n\n  const setValidTargets = num => {\n    let vaildVal = handleInvalidValue(num);\n    setValueTargets(vaildVal);\n  }; // High Availablity\n\n\n  const [LastTargetsSliderVal, setLastTargetsSliderVal] = useState(FREE_TARGETS);\n  const [haCheckboxVal, setHaCheckboxVal] = useState(false);\n  const isEligibleHA = valueTargets >= HIGH_AVAILABILITY_TARGETS;\n  const renderHaChecked = haCheckboxVal || isEligibleHA;\n\n  const highAvailabilityCheck = e => {\n    // Updating checkbox state\n    const newHaCheckboxVal = e.target.checked;\n    setHaCheckboxVal(newHaCheckboxVal); // [ ] => [x]\n\n    if (newHaCheckboxVal) {\n      // Set high availablility value\n      if (valueTargets < HIGH_AVAILABILITY_TARGETS) {\n        setValueTargets(HIGH_AVAILABILITY_TARGETS);\n      }\n    } else {\n      // [x] => [ ]\n      // Reset to user's last input value\n      setValueTargets(LastTargetsSliderVal);\n    }\n  }; // Unlimited Targets\n\n\n  const [unlimitedTargetsCheckboxVal, setUnlimitedTargetsCheckboxVal] = useState(false);\n  const isEligibleUnlimited = valueTargets >= UNLIMITED_TARGETS;\n  const renderUnlimitedTargetsChecked = unlimitedTargetsCheckboxVal || isEligibleUnlimited;\n\n  const unlimitedTargetsCheck = e => {\n    // Updating checkbox state\n    const newUnlimitedTargetsCheckboxVal = e.target.checked;\n    setUnlimitedTargetsCheckboxVal(newUnlimitedTargetsCheckboxVal); // [ ] => [x]\n\n    if (newUnlimitedTargetsCheckboxVal) {\n      // Set unlimited target value\n      if (valueTargets < UNLIMITED_TARGETS) {\n        setValueTargets(UNLIMITED_TARGETS);\n      }\n    } else {\n      // [x] => [ ]\n      // Reset to user's last input value\n      setValueTargets(LastTargetsSliderVal);\n    }\n  }; // Calculations\n\n\n  const calcChargedTargets = valueTargets => {\n    if (isChargedTargets(valueTargets)) {\n      return valueTargets - FREE_TARGETS;\n    } else {\n      return 0;\n    }\n  };\n\n  const targetsPrice = calcChargedTargets(valueTargets) * COST_PER_TARGET;\n  const totalPrice = targetsPrice;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, \"Server\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, renderUnlimitedTargetsChecked ? UNLIMITED_PRICE : formatCcy(totalPrice), /*#__PURE__*/React.createElement(\"sup\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }, \"*\")), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 11\n    }\n  }, \" / Month\")), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, \"High availability feature included in plan with more than 100 deployment targets.\"), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, \"For\", \" \", renderUnlimitedTargetsChecked ? ` unlimited deployment targets` : \" up to \" + valueTargets + \" deployment targets \"), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }, renderUnlimitedTargetsChecked ? null : /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Slider, {\n    value: valueTargets,\n    onChange: handleSliderChange,\n    \"aria-labelledby\": \"input-slider\",\n    min: 10,\n    max: 2000,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    className: classes.input,\n    value: valueTargets,\n    margin: \"dense\",\n    onChange: e => updateUserTargets(parseInt(e.target.value, 10)),\n    onBlur: handleBlur,\n    inputProps: {\n      step: 10,\n      min: 10,\n      max: 2000,\n      type: \"number\",\n      \"aria-labelledby\": \"input-slider\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: renderUnlimitedTargetsChecked,\n      onChange: unlimitedTargetsCheck,\n      name: \"unlimitedTargets\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }\n    }),\n    label: \"Unlimited Targets\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default ServerPricing;","map":{"version":3,"sources":["/Users/jessicaross/Documents/GitHub/designer-pricing-prototype/src/pages/pricing/components/ServerPricing.tsx"],"names":["React","useState","Box","Grid","Input","Slider","Typography","makeStyles","formatCcy","handleInvalidValue","FormControlLabel","Checkbox","useStyles","root","width","input","FREE_TARGETS","COST_PER_TARGET","HIGH_AVAILABILITY_TARGETS","UNLIMITED_TARGETS","UNLIMITED_PRICE","isChargedTargets","valueTargets","ServerPricing","classes","setValueTargets","handleSliderChange","event","newValue","setLastTargetsSliderVal","handleBlur","updateUserTargets","setValidTargets","setHaCheckboxVal","num","vaildVal","LastTargetsSliderVal","haCheckboxVal","isEligibleHA","renderHaChecked","highAvailabilityCheck","e","newHaCheckboxVal","target","checked","unlimitedTargetsCheckboxVal","setUnlimitedTargetsCheckboxVal","isEligibleUnlimited","renderUnlimitedTargetsChecked","unlimitedTargetsCheck","newUnlimitedTargetsCheckboxVal","calcChargedTargets","targetsPrice","totalPrice","parseInt","value","step","min","max","type"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { useState } from \"react\";\nimport classNames from \"classnames\";\nimport { Box, Grid, Input, Slider, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { formatCcy, handleInvalidValue } from \"../../../utils\";\nimport { FormControlLabel } from \"@material-ui/core\";\nimport { Checkbox } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: 250,\n  },\n  input: {\n    width: 42,\n  },\n});\n\nconst FREE_TARGETS = 10;\nconst COST_PER_TARGET = 10;\nconst HIGH_AVAILABILITY_TARGETS = 100;\nconst UNLIMITED_TARGETS = 2001;\nconst UNLIMITED_PRICE = \"192,000\";\n\nconst isChargedTargets = (valueTargets: number | string): boolean => {\n  return valueTargets > FREE_TARGETS;\n};\n\nconst ServerPricing = () => {\n  // Styling\n  const classes = useStyles();\n\n  // Deployment Targets\n  const [valueTargets, setValueTargets] = useState(FREE_TARGETS);\n\n  const handleSliderChange = (event: any, newValue: any) => {\n    setValueTargets(newValue);\n    setLastTargetsSliderVal(valueTargets);\n  };\n\n  const handleBlur = () => {\n    if (valueTargets < 0) {\n      setValueTargets(0);\n    } else if (valueTargets > 10000) {\n      setValueTargets(10000);\n    }\n  };\n\n  // Single spot where targets slider value to be set by the user\n  const updateUserTargets = (valueTargets: number) => {\n    setValidTargets(valueTargets); // update display value\n    setLastTargetsSliderVal(valueTargets); // remember user's last value\n\n    // reset checkbox if targets slider value is not eligible to HA\n    if (valueTargets < HIGH_AVAILABILITY_TARGETS) {\n      setHaCheckboxVal(false);\n    }\n  };\n  const setValidTargets = (num: number) => {\n    let vaildVal = handleInvalidValue(num);\n    setValueTargets(vaildVal);\n  };\n\n  // High Availablity\n  const [LastTargetsSliderVal, setLastTargetsSliderVal] = useState(\n    FREE_TARGETS\n  );\n  const [haCheckboxVal, setHaCheckboxVal] = useState(false);\n  const isEligibleHA = valueTargets >= HIGH_AVAILABILITY_TARGETS;\n  const renderHaChecked = haCheckboxVal || isEligibleHA;\n  const highAvailabilityCheck = (e: { target: { checked: any } }) => {\n    // Updating checkbox state\n    const newHaCheckboxVal = e.target.checked;\n    setHaCheckboxVal(newHaCheckboxVal);\n    // [ ] => [x]\n    if (newHaCheckboxVal) {\n      // Set high availablility value\n      if (valueTargets < HIGH_AVAILABILITY_TARGETS) {\n        setValueTargets(HIGH_AVAILABILITY_TARGETS);\n      }\n    } else {\n      // [x] => [ ]\n      // Reset to user's last input value\n      setValueTargets(LastTargetsSliderVal);\n    }\n  };\n\n  // Unlimited Targets\n  const [\n    unlimitedTargetsCheckboxVal,\n    setUnlimitedTargetsCheckboxVal,\n  ] = useState(false);\n  const isEligibleUnlimited = valueTargets >= UNLIMITED_TARGETS;\n  const renderUnlimitedTargetsChecked =\n    unlimitedTargetsCheckboxVal || isEligibleUnlimited;\n  const unlimitedTargetsCheck = (e: { target: { checked: any } }) => {\n    // Updating checkbox state\n    const newUnlimitedTargetsCheckboxVal = e.target.checked;\n    setUnlimitedTargetsCheckboxVal(newUnlimitedTargetsCheckboxVal);\n    // [ ] => [x]\n    if (newUnlimitedTargetsCheckboxVal) {\n      // Set unlimited target value\n      if (valueTargets < UNLIMITED_TARGETS) {\n        setValueTargets(UNLIMITED_TARGETS);\n      }\n    } else {\n      // [x] => [ ]\n      // Reset to user's last input value\n      setValueTargets(LastTargetsSliderVal);\n    }\n  };\n\n  // Calculations\n  const calcChargedTargets = (valueTargets: any) => {\n    if (isChargedTargets(valueTargets)) {\n      return valueTargets - FREE_TARGETS;\n    } else {\n      return 0;\n    }\n  };\n\n  const targetsPrice = calcChargedTargets(valueTargets) * COST_PER_TARGET;\n  const totalPrice = targetsPrice;\n\n  return (\n    <>\n      <Box>\n        <h2>Server</h2>\n        <p>\n          <span>\n            {renderUnlimitedTargetsChecked\n              ? UNLIMITED_PRICE\n              : formatCcy(totalPrice)}\n            <sup>*</sup>\n          </span>\n          <span> / Month</span>\n        </p>\n        <p>\n          High availability feature included in plan with more than 100\n          deployment targets.\n        </p>\n\n        <Grid item>\n          <Typography>\n            For{\" \"}\n            {renderUnlimitedTargetsChecked\n              ? ` unlimited deployment targets`\n              : \" up to \" + valueTargets + \" deployment targets \"}\n          </Typography>\n\n          <div className={classes.root}>\n            {renderUnlimitedTargetsChecked ? null : (\n              <Grid container spacing={2} alignItems=\"center\">\n                <Grid item xs>\n                  <Slider\n                    value={valueTargets}\n                    onChange={handleSliderChange}\n                    aria-labelledby=\"input-slider\"\n                    min={10}\n                    max={2000}\n                  />\n                </Grid>\n\n                <Grid item>\n                  <Input\n                    className={classes.input}\n                    value={valueTargets}\n                    margin=\"dense\"\n                    onChange={(e) =>\n                      updateUserTargets(parseInt(e.target.value, 10))\n                    }\n                    onBlur={handleBlur}\n                    inputProps={{\n                      step: 10,\n                      min: 10,\n                      max: 2000,\n                      type: \"number\",\n                      \"aria-labelledby\": \"input-slider\",\n                    }}\n                  />\n                </Grid>\n              </Grid>\n            )}\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={renderUnlimitedTargetsChecked}\n                  onChange={unlimitedTargetsCheck}\n                  name=\"unlimitedTargets\"\n                />\n              }\n              label=\"Unlimited Targets\"\n            />\n          </div>\n        </Grid>\n      </Box>\n    </>\n  );\n};\nexport default ServerPricing;\n"]},"metadata":{},"sourceType":"module"}